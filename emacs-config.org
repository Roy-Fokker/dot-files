#+TITLE: Emacs Config
#+AUTHOR: Neel Raiyani
#+STARTUP: content indent
#+KEYWORDS: config emacs init


* Reference Links
- [[https://github.com/rememberYou/.emacs.d/blob/master/config.org][rememberYou]]
- [[https://github.com/jwiegley/dot-emacs/blob/master/init.el][J Wiegley]]
- [[https://github.com/angrybacon/dotemacs/blob/master/dotemacs.org][dotEmacs]]
- [[https://jonathanabennett.github.io/blog/2019/05/28/emacs.org-~-may-2019/][Jonathan Abennett]]
- [[https://github.com/rubensts/.emacs.d][Rubensts]]
  
* Tangle Org on Save
Generate ~emacs-config.el~ as soon as this org file is saved.
This save doing it at emacs load time.

Function to invoke when saving
#+begin_src elisp
  (defun my/tangle-org-save ()
    (when (string= buffer-file-name
                   (expand-filename "emacs-config.org" 
                                    user-emacs-directory))
      (org-babel-tangle)))
#+end_src

Hook into Emacs on-save trigger
#+begin_src elisp
  (add-hook 'after-save-hook 'my/tangle-org-save)
#+end_src
* Global Defaults
** Garbage Collection
Change GC threshold for duration of initialization,
technique from DOOM Emacs FAQ.
#+begin_src elisp
  (setq gc-cons-threshold  (* 2 1000 1000)
        gc-cons-percentage 0.6)
#+end_src

File handler check is not needed during startup. 
Save the current file handler so we can reset it later
#+begin_src elisp
  (defvar startup/file-name-handler-alist file-name-handler-alist)
  (setq file-name-handler-alist nil)
#+end_src

Function to reset both garbage collection threshold and file handler
#+begin_src elisp
    (defun startup/reset-gc-and-file-handler ()
      (setq gc-cons-threshold  (* 5 100 1000)
            gc-cons-percentage 0.1
            file-name-handler-alist startup/file-name-handler-alist)
      (garbage-collect)
      t)
#+end_src

After Emacs finishes initialization call above function.
#+begin_src elisp
  (add-hook 'after-init-hook 'startup/reset-gc-and-file-handler)
#+end_src

Garbage Collect on losing focus.
#+begin_src elisp
  (add-hook 'focus-out-hook #'garbage-collect)
#+end_src

** Better Defaults
Set basic default variables for emacs to make it more usable
#+begin_src elisp
  (setq-default inhibit-startup-screen t                        ; Disable Emacs Welcome Screen
                backup-directory-alist `(("." . "backups"))     ; backup files in this directory
                custom-file (expand-file-name ".emacs-custom.el"; save all machine specific settings here
                                              user-emacs-directory)
                auto-save-file-name-transforms '((".*"          ; transform backup file names
                                                  "~/.emacs.d/auto-save-list/" t))
                package-enable-at-startup nil                   ; do not load packages before start up
                delete-by-moving-to-trash t                     ; delete moves to recycle bin
                column-number-mode t                            ; display column number
                show-paren-delay 0                              ; show matching immediately
                scroll-conservatively most-positive-fixnum      ; scroll sensibly, don't jump around
                mouse-wheel-scroll-amount '(1 ((shift) . 1))    ; one line at a time
                mouse-wheel-follow-mouse t                      ; scroll window under mouse
                find-file-visit-truename t                      ; find true path of a file
                tab-width 4                                     ; force tab to be 4 spaces
                w32-get-true-file-attributes nil                ; wonder if this helps with freezing
                help-window-select t                            ; Focus on new help windows when opened
                use-package-always-ensure t                     ; Tell use-package to always download missing packages
                )
#+end_src

** Load Custom File
Load custom file if it exists. It will hold machine specific settings
#+begin_src elisp
  (defun emacs/load-custom-file ()
    (when (file-exists-p custom-file)
      (load custom-file)))

  (if window-system
      (add-hook 'after-init-hook 'emacs/load-custom-file))
#+end_src

** Text Encoding
Tell emacs to use utf-8 as default text system
#+begin_src elisp
  (setq locale-coding-system 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-selection-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)
  (set-default-coding-systems 'utf-8)
  (setq-default buffer-file-coding-system 'utf-8
                default-buffer-file-coding-system 'utf-8)
  (when (eq system-type 'windows-nt)
    (set-clipboard-coding-system 'utf-16le-dos))
#+end_src

** Editor Font
Default font to use
#+begin_src elisp
  (setq inhibit-compacting-font-caches t)
  (set-face-attribute 'default nil :font "Source Code Pro")
  (set-fontset-font t 'latin "Noto Sans")
#+end_src

* Globally Enabled Modes
Enable some convincence behaviours
#+begin_src elisp
  (global-display-line-numbers-mode)  ; Display line-numbers in all buffers
  (global-hl-line-mode)               ; Highlight current line
  (menu-bar-mode -1)                  ; Hide menu bar
  (tool-bar-mode -1)                  ; Hide tool bar
  (scroll-bar-mode -1)                ; Hide scroll bar
  (show-paren-mode t)                 ; Parenthesis highlighting
  (delete-selection-mode t)           ; Enable delete selection mode
  (cua-mode t)                        ; Enable CUA mode
  (fset 'yes-or-no-p 'y-or-n-p)       ; Change yes/no prompt to y/n
#+end_src

* Global Keybindings
Keybinding to use regardless of current mode.
Doesn't always work, but when it does is consistent with CUA patterns
#+begin_src elisp
(global-set-key (kbd "<C-tab>") 'switch-to-next-buffer)
(global-set-key (kbd "<C-S-tab>") 'switch-to-prev-buffer)
#+end_src

* Frame Geometry Functions
** Save
Function to save Window geometry and location.
#+begin_src elisp
  (defun emacs/save-framegeometry ()
    (let ((frame-left      (frame-parameter (selected-frame) 'left))
          (frame-top       (frame-parameter (selected-frame) 'top))
          (frame-width     (frame-parameter (selected-frame) 'width))
          (frame-height    (frame-parameter (selected-frame) 'height))
          (frame-size-file (expand-file-name "framegeometry.el" user-emacs-directory)))

      (when (not (number-or-marker-p frame-left))
        (setq frame-left 0))
      (when (not (number-or-marker-p frame-top))
        (setq frame-top 0))
      (when (not (number-or-marker-p frame-width))
        (setq frame-width 800))
      (when (not (number-or-marker-p frame-height))
        (setq frame-height 600))

      (with-temp-buffer
        (insert
         ";; This is the previous emacs frame's geometry.\n"
         ";; Last generated " (current-time-string) ".\n"
         "(setq initial-frame-alist\n"
         "      '(" (format "(top . %d)\n" (max frame-top 0))
         (format "        (left . %d)\n" (max frame-left 0))
         (format "        (width . %d)\n" (max frame-width 0))
         (format "        (height . %d)))\n" (max frame-height 0)))
        (when (file-writable-p frame-size-file)
          (write-file frame-size-file)))))
#+end_src
** Load
Function to load Window geometry and location.
#+begin_src elisp
  (defun emacs/load-framegeometry ()
    (let ((frame-save-file (expand-file-name "framegeometry.el"
                                             user-emacs-directory)))
      (when (file-readable-p frame-save-file)
        (load-file frame-save-file))))
#+end_src
** Hooks
Tell emacs to run the above functions based on trigger.
But only if it is run as GUI Window mode.
#+begin_src elisp
  (if window-system
      (progn
        (add-hook 'kill-emacs-hook 'emacs/save-framegeometry)
        (add-hook 'after-init-hook 'emacs/load-framegeometry)
        )))
#+end_src

* Quick Load Configuration Org file
** Load to Edit
#+begin_src elisp
  (defun emacs/open-init-file ()
    (interactive)
    (find-file (expand-file-name "emacs-config.org"
                                 user-emacs-directory))
#+end_src
** Execute updated configuration
Reload init file
#+begin_src elisp
  (defun emacs/reload-init-file ()
    (interactive)
    (load user-init-file))
#+end_src
** Keybindings
Set some global key bindings to invoke above two functions
#+begin_src elisp
  (global-set-key [(control f2)] 'emacs/open-init-file)
  (global-set-key [(control f5)] 'emacs/reload-init-file))
#+end_src

* Editor Theme
** Theme
Using Dracula theme. 
#+begin_src elisp
  (use-package dracula-theme
    :init
    (load-theme 'dracula t))
#+end_src
** Icons
All the icons package. Not sure if it's used
#+begin_src elisp
  (use-package all-the-icons)
#+end_src
** Modeline
Theme the mode line using Doom Emacs's modeline package.
#+begin_src elisp
  (use-package doom-modeline
    :init
    (setq doom-modeline-icon (display-graphic-p)
          doom-modeline-major-mode-icon t
          doom-modeline-major-mode-color-icon t
          doom-modeline-minor-modes t)
    :custom-face
    (doom-modeline-bar ((t (:background "#bd93f9"))))
    (doom-modeline-bar-inactive ((t (:background "#6272a4"))))
    :hook (after-init . doom-modeline-mode))
#+end_src

* Common Packages
** Which Key
#+begin_src elisp
  (use-package which-key
    :hook (after-init . which-key-mode))
#+end_src
** Rainbow Brackets
#+begin_src elisp
  (use-package rainbow-delimiters
    :hook ((prog-mode             . rainbow-delimiters-mode)
           (lisp-interaction-mode . rainbow-delimiters-mode)
           (slime-repl-mode       . rainbow-delimiters-mode)
           (geiser-repl-mode      . rainbow-delimiters-mode)))
#+end_src
** Window Number/Switcher
#+begin_src elisp
  (use-package winum
    :bind (("C-`" . winum-select-window-by-number)
           ;; ("M-0" . winum-select-window-0-or-10)
           ("M-1" . winum-select-window-1)
           ("M-2" . winum-select-window-2)
           ("M-3" . winum-select-window-3)
           ("M-4" . winum-select-window-4)
           ("M-5" . winum-select-window-5)
           ("M-6" . winum-select-window-6)
           ("M-7" . winum-select-window-7)
           ("M-8" . winum-select-window-8))
    :hook (after-init . winum-mode))
#+end_src
** Project Tree
#+begin_src elisp
  (use-package treemacs
    :defer t
    :config'
    (setq treemacs-python-executable "python.exe")
    :bind
    (:map global-map
          ("M-0"       . treemacs-select-window)
          ("C-x t 1"   . treemacs-delete-other-windows)
          ("C-x t t"   . treemacs)
          ("<f8>"      . treemacs)
          ("C-x t B"   . treemacs-bookmark)
          ("C-x t C-t" . treemacs-find-file)
          ("C-x t M-t" . treemacs-find-tag)))

  (use-package treemacs-icons-dired
    :after treemacs dired
    :config (treemacs-icons-dired-mode))

  (use-package treemacs-magit
    :after treemacs magit)
#+end_src
** File, Buffer and Search
#+begin_src elisp
  (use-package smex)

  (use-package ivy
    :init
    (setq-default ivy-initial-input-alist nil)
    (setq ivy-use-virtual-buffers t
          ivy-count-format "(%d/%d) "
          ivy-re-builders-alist '((t . ivy--regex-fuzzy))
          ivy-height 20)
    :hook (after-init . ivy-mode))

  (use-package all-the-icons-ivy
    :config
    (all-the-icons-ivy-setup))

  (use-package ivy-rich
    :hook (after-init . ivy-rich-mode))

  (use-package counsel
    :bind (("M-x" . counsel-M-x)
           ("C-x C-f" . counsel-find-file)))

  (use-package swiper
    :bind (("C-s" . swiper)))

  (use-package ivy-hydra)
#+end_src

* Programming Assistance
** Auto completion
** Linter
** Snippets
** Brackets Balancer
** Documentation

* Org Mode

* Git Porceline

* Language Server
** LSP
** DAP

* Common Lisp
** Implementations List
** Interaction Mode

* Scheme
** Implementations List
** Interaction Mode

* C and C++
** CMake
** {Other things}??

* Python

* Markdown

* Powershell

* IRC


